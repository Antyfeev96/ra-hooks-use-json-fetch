{"version":3,"sources":["Components/FetchBox.jsx","hooks/useJsonFetch.js","App.jsx","reportWebVitals.js","index.js"],"names":["FetchBox","props","url","opts","useState","data","setData","loading","setLoading","error","setError","timestampRef","useRef","useEffect","a","timestamp","Date","now","current","fetch","response","ok","Error","statusText","json","result","status","name","message","fetchData","useJsonFetch","console","log","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAKe,SAASA,EAASC,GAAQ,IAAD,ECJzB,SAAsBC,EAAKC,GAAO,IAAD,EACtBC,mBAAS,MADa,mBACvCC,EADuC,KACjCC,EADiC,OAEhBF,oBAAS,GAFO,mBAEvCG,EAFuC,KAE9BC,EAF8B,OAGpBJ,mBAAS,MAHW,mBAGvCK,EAHuC,KAGhCC,EAHgC,KAIxCC,EAAeC,mBA4BrB,OA1BAC,qBAAU,YACO,uCAAG,gCAAAC,EAAA,6DACVC,EAAYC,KAAKC,MACvBN,EAAaO,QAAUH,EACvBP,GAAW,GAHK,kBAKSW,MAAM,GAAD,OAAIjB,EAAJ,YAAWC,IALzB,WAKRiB,EALQ,QAMAC,GANA,sBAON,IAAIC,MAAMF,EAASG,YAPb,UASVZ,EAAaO,UAAYH,EATf,kCAUSK,EAASI,OAVlB,QAUNC,EAVM,OAWZnB,EAAQmB,EAAOC,QACfhB,EAAS,MAZG,0DAedA,EAAS,CACPiB,KAAiB,gBAAX,KAAEA,KAAyB,wFAAoB,KAAEA,KACvDC,QAAS,KAAEA,UAjBC,yBAoBdpB,GAAW,GApBG,6EAAH,oDAuBfqB,KACC,CAAC3B,EAAKC,IACF,CAAE,CAAEE,OAAME,UAASE,UD1BUqB,CADd7B,EAAdC,IAAcD,EAATE,MADyB,sBAE5BE,EAF4B,EAE5BA,KAAME,EAFsB,EAEtBA,QAASE,EAFa,EAEbA,MAEzB,OADAsB,QAAQC,IAAI,CAAE3B,OAAME,UAASE,UAE3B,sBAAKwB,UAAU,OAAf,UACI1B,GAAW,2CACXF,GAAQ,yCAAYA,KACpBI,GACF,gCACE,2CACA,8BAAMA,EAAMkB,OACZ,8BAAMlB,EAAMmB,gBEdL,SAASM,IACtB,IAAMhC,EAAM,wBACZ,OACE,sBAAK+B,UAAU,MAAf,UACE,cAAC,EAAD,CAAU/B,IAAKA,EAAKC,KAAO,SAC3B,cAAC,EAAD,CAAUD,IAAKA,EAAKC,KAAO,YAC3B,cAAC,EAAD,CAAUD,IAAKA,EAAKC,KAAO,aCTjC,IAYegC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0ce8539b.chunk.js","sourcesContent":["import './FetchBox.scss';\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport useJsonFetch from '../hooks/useJsonFetch';\r\n\r\nexport default function FetchBox(props) {\r\n  const { url, opts } = props;\r\n  const [ { data, loading, error }] = useJsonFetch(url, opts);\r\n  console.log({ data, loading, error });\r\n  return (\r\n    <div className=\"item\">\r\n      { loading && <p>Loading...</p> }\r\n      { data && <p>Data is {data}</p>}\r\n      { error && \r\n      <div>\r\n        <div>Error is</div>\r\n        <div>{error.name}</div>\r\n        <div>{error.message}</div>\r\n      </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nFetchBox.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  opts: PropTypes.string\r\n}","import { useEffect, useState, useRef } from 'react';\r\nexport default function useJsonFetch(url, opts) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const timestampRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const timestamp = Date.now();\r\n      timestampRef.current = timestamp;\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(`${url}/${opts}`);\r\n        if (!response.ok) {\r\n          throw new Error(response.statusText);\r\n        }\r\n        if (timestampRef.current === timestamp) {\r\n          const result = await response.json();\r\n          setData(result.status);\r\n          setError(null);\r\n        }\r\n      } catch (e) {\r\n        setError({\r\n          name: e.name === 'SyntaxError' ? 'Ошибка парсинга' : e.name,\r\n          message: e.message\r\n        })\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [url, opts]);\r\n  return [ { data, loading, error } ];\r\n}","import './App.scss';\r\nimport FetchBox from './Components/FetchBox';\r\n\r\nexport default function App() {\r\n  const url = 'http://localhost:7070'\r\n  return (\r\n    <div className=\"app\">\r\n      <FetchBox url={url} opts = 'data' />\r\n      <FetchBox url={url} opts = 'loading' />\r\n      <FetchBox url={url} opts = 'error' />\r\n    </div>\r\n  );\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}